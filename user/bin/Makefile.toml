[config]
default_to_workspace = false
skip_core_tasks = true

[env]
OSABI_VALUE = "83"
DIST_DIR = "dist"

[tasks.build]
description = "Build all user programs with OSABI=83 (debug mode)"
dependencies = ["build-only-debug", "set-osabi"]

[tasks.build-release]
description = "Build all user programs with OSABI=83 (release mode)"
dependencies = ["build-only-release", "set-osabi"]

[tasks.build-only]
description = "Build user programs without OSABI setting (debug, internal)"
dependencies = ["build-only-debug"]

[tasks.build-only-debug]
description = "Build user programs in debug mode without OSABI setting (internal)"
command = "cargo"
args = ["build", "--out-dir", "dist"]

[tasks.build-only-release]
description = "Build user programs in release mode without OSABI setting (internal)"
command = "cargo"
args = ["build", "--release", "--out-dir", "dist"]

[tasks.set-osabi]
description = "Set OSABI to 83 for all user program binaries"
dependencies = ["build-only"]
script = '''
echo "Setting OSABI to ${OSABI_VALUE} for user programs..."
if [ ! -d "${DIST_DIR}" ]; then
    echo "Error: ${DIST_DIR} directory not found"
    exit 1
fi

# Find all executable files in the dist directory
for binary_path in "${DIST_DIR}"/*; do
    if [ -f "${binary_path}" ] && [ -x "${binary_path}" ]; then
        binary=$(basename "${binary_path}")
        echo "Setting OSABI for ${binary}"
        python3 ./set_osabi.py "${binary_path}" ${OSABI_VALUE}
    fi
done

# Check if any binaries were processed
binary_count=$(find "${DIST_DIR}" -type f -executable | wc -l)
if [ "$binary_count" -eq 0 ]; then
    echo "Warning: No executable binaries found in ${DIST_DIR}"
fi
'''

[tasks.verify-osabi]
description = "Verify OSABI settings for all binaries"
script = '''
echo "Verifying OSABI settings..."
if [ ! -d "${DIST_DIR}" ]; then
    echo "Error: ${DIST_DIR} directory not found"
    exit 1
fi

# Find all executable files in the dist directory
found_binaries=false
for binary_path in "${DIST_DIR}"/*; do
    if [ -f "${binary_path}" ] && [ -x "${binary_path}" ]; then
        binary=$(basename "${binary_path}")
        echo -n "${binary}: "
        od -t u1 -N 1 -j 7 "${binary_path}" | awk 'NR==1 {print $2}'
        found_binaries=true
    fi
done

if [ "$found_binaries" = false ]; then
    echo "No executable binaries found in ${DIST_DIR}"
fi
'''

[tasks.clean]
description = "Clean build artifacts"
command = "cargo"
args = ["clean"]

[tasks.test-osabi]
description = "Test OSABI setting with a single binary"
script = '''
if [ "$#" -eq 0 ]; then
    echo "Usage: cargo make test-osabi -- <binary_name>"
    exit 1
fi
BINARY_NAME="$1"
BINARY_PATH="${DIST_DIR}/${BINARY_NAME}"

if [ -f "${BINARY_PATH}" ]; then
    echo "Current OSABI for ${BINARY_NAME}:"
    od -t u1 -N 1 -j 7 "${BINARY_PATH}" | awk 'NR==1 {print $2}'
    python3 ./set_osabi.py "${BINARY_PATH}" ${OSABI_VALUE}
    echo "New OSABI for ${BINARY_NAME}:"
    od -t u1 -N 1 -j 7 "${BINARY_PATH}" | awk 'NR==1 {print $2}'
else
    echo "Binary ${BINARY_NAME} not found in ${DIST_DIR}"
    exit 1
fi
'''
